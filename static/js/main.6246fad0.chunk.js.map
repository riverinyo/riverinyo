{"version":3,"sources":["assets/me.jpg","Components/NavBar.js","Components/ProfileImage.jsx","Components/Home.jsx","Components/TwitterSearch.jsx","Components/About.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScroll","prevScrollpos","state","currentScrollPos","window","pageYOffset","visible","setState","addEventListener","removeEventListener","react_default","a","createElement","className","classnames","navbar-hidden","react_router_dom","to","Component","ProfileImage","src","image","alt","sizes","Home","Components_ProfileImage","TwitterSearch","About","App","NavBar_NavBar","react_router","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iRCInBC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAkBRQ,aAAe,WAAM,IACXC,EAAkBR,EAAKS,MAAvBD,cAEFE,EAAmBC,OAAOC,YAC1BC,EAAUL,EAAgBE,EAEhCV,EAAKc,SAAS,CACZN,cAAeE,EACfG,aAxBFb,EAAKS,MAAQ,CACXD,cAAeG,OAAOC,YACtBC,SAAS,GALMb,mFAYjBW,OAAOI,iBAAiB,SAAUZ,KAAKI,6DAIvCI,OAAOK,oBAAoB,SAAUb,KAAKI,+CAenC,IACCM,EAAYV,KAAKM,MAAjBI,QACR,OACEI,EAAAC,EAAAC,cAAA,OACEC,UAAWC,IAAW,IAAK,CACzBC,iBAAkBT,KAGpBI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,QACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,kBAAT,kBACAP,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,UAAT,iBA1C4BC,8BCMrBC,EAPM,kBACjBT,EAAAC,EAAAC,cAAA,eACIF,EAAAC,EAAAC,cAAA,eACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASO,IAAKC,IAAOC,IAAI,SAASC,MAAM,OCoBhDC,EAvBF,kBACXd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAACa,EAAD,MACAf,EAAAC,EAAAC,cAAA,4BCTWc,EAFO,kBAAMhB,EAAAC,EAAAC,cAAA,qCCEbe,EAFD,kBAAMjB,EAAAC,EAAAC,cAAA,qBCuBLgB,EAhBH,kBACVlB,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiB,EAAD,MACAnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,KACEpB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWT,IACjCd,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,iBAAiBE,UAAWP,IACxChB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,SAASE,UAAWN,SCNtBO,QACW,cAA7B9B,OAAO+B,SAASC,UAEe,UAA7BhC,OAAO+B,SAASC,UAEhBhC,OAAO+B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6246fad0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/me.6f29b2e5.jpg\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport classnames from 'classnames';\n\nexport default class NavBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      prevScrollpos: window.pageYOffset,\n      visible: true\n    };\n\n    // const handleScroll = this.handleScroll.bind(this.handleScroll)\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n    const { prevScrollpos } = this.state;\n\n    const currentScrollPos = window.pageYOffset;\n    const visible = prevScrollpos > currentScrollPos;\n\n    this.setState({   \n      prevScrollpos: currentScrollPos,\n      visible\n    });\n  };\n\n  render() {\n    const { visible } = this.state; \n    return (\n      <nav\n        className={classnames(' ', {\n          'navbar-hidden': !visible\n        })}\n      >\n        <Link to=\"/\">Home</Link>\n        <Link to=\"/twittersearch\">Twitter Search</Link>\n        <Link to=\"/about\">About</Link>\n      </nav>\n    );\n  }\n}\n","import React from 'react'\nimport image from \"../assets/me.jpg\"\n\nconst ProfileImage = () => (\n    <picture>\n        <source></source>\n        <img className=\"Avatar\" src={image} alt=\"Avatar\" sizes=\"\" />\n    </picture>\n)\n\nexport default ProfileImage","import React from 'react';\nimport ProfileImage from './ProfileImage';\n\nconst Home = () => (\n  <div className=\"App\">\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <ProfileImage />\n    <p>Hi, I'm Ivan!</p>\n    {/*\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\n\nconst TwitterSearch = () => <div>Hello Twitter Search </div>;\n\nexport default TwitterSearch;\n","import React from 'react';\n\nconst About = () => <div>About</div>;\n\nexport default About;\n","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport NavBar from './Components/NavBar';\nimport Home from './Components/Home';\nimport TwitterSearch from './Components/TwitterSearch';\nimport About from './Components/About';\n\nconst App = () => (\n  <BrowserRouter>\n    <div className=\"App\">\n      <NavBar />\n      <header className=\"App-header\" />\n      <div>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/twittersearch\" component={TwitterSearch} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </div>\n    </div>\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n    "],"sourceRoot":""}